'''
Greatest Common Divisor(最大公约数)
Prime(素数基础理论)
Modulus(求模运算)
Fast Power(快速幂运算)
'''

'''-----------------------------------------------------------------------------------------------------------------------------------------------------------------'''
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=最大公约数-=-=-=-==-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
'''-----------------------------------------------------------------------------------------------------------------------------------------------------------------'''

# 最大公约数
'''
常用的方法为辗转相除法，也称为欧几里得算法。
不妨设函数gcd(a, b)是自然是a, b的最大公约数，不妨设a > b, 则有 a=b×p+q,
那么对于gcd(b, q)则是b和q的最大公约数，也就是说gcd(b, q)既能整除b, 又能整除a(因为 a=b×p+q, p是整数)，
如此反复最后得到gcd(a, b) = gcd(c, 0), 第二个数为0时直接返回c.

如果最开始a < b, 那么gcd(b, a % b) = gcd(b, a) = gcd(a, b % a).

关于时间复杂度的证明：可以分a > b/2和a < b/2证明，对数级别的时间复杂度，过程略。
与最大公约数相关的还有最小公倍数(LCM, Lowest Common Multiple), 它们两者之间的关系为 lcm(a,b)×gcd(a,b)=∣ab∣.
'''
# Problem
# 给定平面上两个坐标 P1=(x1, y1), P2=(x2,y2), 问线段 P1P2 上除 P1, P2以外还有几个整数坐标点？

# Solution
# 问的是线段 P1P2, 故除 P1,P2以外的坐标需在 x1,x2,y1,y2范围之内，且不包含端点。在两端点不重合的前提下有：
# (y - y1) / (x - x1) = (y2 -y1) / (x2 - x1)
# 那么若得知 M = gcd(x2 - x1, y2 -y1),则有 x - x1 必为x2 - x1／M 的整数倍大小，又因为 x1 < x < x2 ，故最多有 M-1 个整数坐标点。



'''-----------------------------------------------------------------------------------------------------------------------------------------------------------------'''
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=邻接表=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
'''-----------------------------------------------------------------------------------------------------------------------------------------------------------------'''



'''-----------------------------------------------------------------------------------------------------------------------------------------------------------------'''
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-求模运算-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
'''-----------------------------------------------------------------------------------------------------------------------------------------------------------------'''

# 求模运算
'''
有时计算结果可能会溢出，此时往往需要对结果取余。
如果有a % m = c % m 和 b % m = d % m, 那么有以下模运算成立。
    (a + b) % m = (c + d) % m
    (a - b) % m = (c - d) % m
    (a × b) % m = (c × d) % m
需要注意的是没有除法运算，另外由于最终结果可能溢出，故需要使用更大范围的类型来保存求模之前的结果。另外若a是负数时往往需要改写为 a % m + m, 这样就保证结果在[0, m - 1]范围内了。
'''


'''-----------------------------------------------------------------------------------------------------------------------------------------------------------------'''
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=快速幂运算=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
'''-----------------------------------------------------------------------------------------------------------------------------------------------------------------'''

# 快速幂运算
'''
快速幂运算的核心思想为反复平方法，将幂指数表示为2的幂次的和，等价于二进制进行移位计算（不断取幂的最低位），比如
X^22 = X^16 * X^4 * X^2
'''



